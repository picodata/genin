name: Build
on: 
  workflow_call:
    secrets:
      RAW_AUTH_RW:
        description: 'A RAW_AUTH_RW passed from UnitTest'
        required: true
      YUM_AUTH_RW:
        description: 'A YUM_AUTH_RW passed from UnitTest'
        required: true
      GPG_KEY_KDY:
        description: 'A GPG_KEY_KDY passed from UnitTest'
        required: true
      DEPLOY_PROD_SSH_KEY:
        description: 'A DEPLOY_PROD_SSH_KEY passed from UnitTest'
        required: true
      KNOWN_HOSTS:
        description: 'A KNOWN_HOSTS passed from UnitTest'
        required: true
    inputs:
      VERSION:
        required: true
        type: string
env:
  YUM_REGISTRY: https://binary.picodata.io/repository/yum
  DEB_REGISTRY: https://binary.picodata.io/repository/ubuntu
  RAW_REGISTRY: https://binary.picodata.io/repository/raw
  VERSION: ${{ inputs.VERSION }}
jobs:
  build:
    name: Build genin binary
    runs-on: [self-hosted, genin]
    container:
      image: docker.binary.picodata.io/rust-builder-stable:latest
    steps:
      - uses: actions/checkout@v3
      - name: Run make build_binary
        run: |
          make build_binary
          make permissions
      - name: Archive apple x64_86 binary
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-apple-darwin.zip
          path: target/x86_64-apple-darwin/release/genin
      - name: Archive windows x64_86 binary
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-pc-windows-gnu.zip
          path: target/x86_64-pc-windows-gnu/release/genin.exe
      - name: Archive gnu binary
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-unknown-linux-gnu.zip
          path: target/x86_64-unknown-linux-gnu/release/genin
      - name: Archive musl binary
        uses: actions/upload-artifact@v3
        with:
          name: x86_64-unknown-linux-musl.zip
          path: target/x86_64-unknown-linux-musl/release/genin

  musl-bin:
    name: Upload musl binary
    needs: [build]
    runs-on: [self-hosted, genin]
    container:
      image: docker.binary.picodata.io/rockylinux:8
    steps:
      - name: Download builded binary
        uses: actions/download-artifact@v3
        with:
          name: x86_64-unknown-linux-musl.zip
          path: .
      - run: ls -la
      - name: Upload archive with binary
        run: |
          chmod 755 genin
          tar -czvf genin-${{ env.VERSION }}-x86_64-musl.tar.gz genin
          curl -v -f -H "Authorization: Basic ${{ secrets.RAW_AUTH_RW }}" --upload-file genin-${{ env.VERSION }}-x86_64-musl.tar.gz ${{ env.RAW_REGISTRY }}/genin/bin/genin-${{ env.VERSION }}-x86_64-musl.tar.gz

  apple:
    name: Upload MacOSX binary
    needs: [build]
    runs-on: [self-hosted, genin]
    container:
      image: docker.binary.picodata.io/rockylinux:8
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download builded binary
        uses: actions/download-artifact@v3
        with:
          name: x86_64-apple-darwin.zip
          path: .
      - name: Build binary
        run: |
          tar -czvf genin-${{ env.VERSION }}-x86_64-macosx.tar.gz genin
          curl -v -f -H "Authorization: Basic ${{ secrets.RAW_AUTH_RW }}" --upload-file genin-${{ env.VERSION }}-x86_64-macosx.tar.gz ${{ env.RAW_REGISTRY }}/genin/osx/genin-${{ env.VERSION }}-x86_64-macosx.tar.gz

  centos7:
    name: Build centos 7 rpm
    needs: [build]
    runs-on: [self-hosted, genin]
    container:
      image: docker.binary.picodata.io/centos:centos7
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download builded binary
        uses: actions/download-artifact@v3
        with:
          name: x86_64-unknown-linux-musl.zip
          path: ./x86_64-unknown-linux-musl/
      - name: Build rpm
        run: | 
          yum install -y rpm-build rpm-devel rpmdevtools make openssh-clients rpm-sign
          sed -ie "s/\${VERSION}/${VERSION}/g" build/el7/genin.x86_64.spec
          rpmdev-setuptree
          rpmbuild -bb build/el7/genin.x86_64.spec
      - name: Sign rpm package
        run: |
          echo -n "${{ secrets.GPG_KEY_KDY }}" | base64 --decode | gpg  --homedir ${GITHUB_WORKSPACE} --import
          cp build/.rpmmacros ~/.rpmmacros
          cat /dev/null | setsid rpm --addsign /github/home/rpmbuild/RPMS/x86_64/genin-${{ env.VERSION }}-1.el7.x86_64.rpm
      - name: Upload rpm to binary.picodata.io
        run: |
          curl -v -f -H "Authorization: Basic ${{ secrets.YUM_AUTH_RW }}" --upload-file /github/home/rpmbuild/RPMS/x86_64/genin-${{ env.VERSION }}-1.el7.x86_64.rpm ${{ env.YUM_REGISTRY }}/el/7/x86_64/os/genin-${{ env.VERSION }}-1.el7.x86_64.rpm
      - name: Archive rpm
        uses: actions/upload-artifact@v3
        with:
          name: genin-${{ env.VERSION }}-1.el7.x86_64.rpm
          path: /github/home/rpmbuild/RPMS/x86_64/genin-${{ env.VERSION }}-1.el7.x86_64.rpm

  centos8:
    name: Build centos 8 prm
    needs: [build]
    runs-on: [self-hosted, genin]
    container:
      image: docker.binary.picodata.io/rockylinux:8
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download builded binary
        uses: actions/download-artifact@v3
        with:
          name: x86_64-unknown-linux-musl.zip
          path: ./x86_64-unknown-linux-musl/
      - name: Build rpm
        run: |
          yum install -y rpm-build rpm-devel rpmdevtools make openssh-clients rpm-sign
          sed -ie "s/\${VERSION}/${VERSION}/g" build/el8/genin.x86_64.spec
          rpmdev-setuptree
          rpmbuild -bb build/el8/genin.x86_64.spec
      - name: Sign rpm package
        run: |
          echo -n "${{ secrets.GPG_KEY_KDY }}" | base64 --decode | gpg  --homedir ${GITHUB_WORKSPACE} --import
          cp build/.rpmmacros ~/.rpmmacros
          cat /dev/null | setsid rpm --addsign /github/home/rpmbuild/RPMS/x86_64/genin-${{ env.VERSION }}-1.el8.x86_64.rpm
      - name: Upload rpm to binary.picodata.io
        run: |
          curl -v -f -H "Authorization: Basic ${{ secrets.YUM_AUTH_RW }}" --upload-file /github/home/rpmbuild/RPMS/x86_64/genin-${{ env.VERSION }}-1.el8.x86_64.rpm ${{ env.YUM_REGISTRY }}/el/8/x86_64/os/genin-${{ env.VERSION }}-1.el8.x86_64.rpm
      - name: Archive rpm
        uses: actions/upload-artifact@v3
        with:
          name: genin-${{ env.VERSION }}-1.el8.x86_64.rpm
          path: /github/home/rpmbuild/RPMS/x86_64/genin-${{ env.VERSION }}-1.el8.x86_64.rpm

  debian:
    name: Build deb package
    needs: [build]
    runs-on: [self-hosted, genin]
    container:
      image: docker.binary.picodata.io/debian:11
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download builded binary
        uses: actions/download-artifact@v3
        with:
          name: x86_64-unknown-linux-musl.zip
          path: ./genin-${{ env.VERSION }}.amd64/usr/bin/
      - name: Build deb
        run: |
          apt update ; apt install -y curl
          mkdir -p genin-${{ env.VERSION }}.amd64/DEBIAN
          chmod 755 genin-${{ env.VERSION }}.amd64/usr/bin/genin
          sed -ie "s/\${VERSION}/${{ env.VERSION }}/g" build/control
          cp build/control genin-${{ env.VERSION }}.amd64/DEBIAN/ ; dpkg-deb --build --root-owner-group genin-${{ env.VERSION }}.amd64
          curl -v -f -H "Authorization: Basic ${{ secrets.RAW_AUTH_RW }}" --upload-file genin-${{ env.VERSION }}.amd64.deb ${{ env.RAW_REGISTRY }}/genin/deb/genin-${{ env.VERSION }}.amd64.deb
      - name: Archive rpm
        uses: actions/upload-artifact@v3
        with:
          name: genin-${{ env.VERSION }}.amd64.deb
          path: genin-${{ env.VERSION }}.amd64.deb

  clean_workspace:
    name: Clean Workspace
    needs: [build, musl-bin, apple, centos7, centos8, debian]
    runs-on: [self-hosted, genin]
    container:
      image: docker.binary.picodata.io/rockylinux:8
    steps:
      - name: Clean workspace
        run: rm -rf ..?* .[!.]* *
        if: always()

  workflow_call:
    name: Release
    needs: [build, musl-bin, apple, centos7, centos8, debian]
    uses: ./.github/workflows/Release.yaml
    if: ${{ github.ref_name == 'master' }}
    with:
      VERSION: ${{ inputs.VERSION }}
    secrets:
      DEPLOY_PROD_SSH_KEY: ${{ secrets.DEPLOY_PROD_SSH_KEY }}
      KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}
